import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

/**
 * parses weather CSV files and returns information
 * 
 * @ssanders

 */
public class CSVMax {
    public CSVRecord hottestHourInFile( CSVParser parser){
        //start with largestSoFar as nothing
        CSVRecord largestSoFar = null;
        //For each row (currentRow) in the CSV File
        for (CSVRecord currentRow : parser) {
            //If largestSoFar is nothing
            //largestSoFar = getLargestOfTwo(currentRow, largestSoFar);
            if (largestSoFar == null) {
                //set largestSoFar to the current row
                largestSoFar = currentRow;
            }
            //Otherwise
            else {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
                //Check if currentRow's temperature > largestSoFar
                if (currentTemp > largestTemp) {
                    //If so update largestSoFar to currentRow
                    largestSoFar = currentRow;
                } 
            }
        }
        //The largestSoFar is the answer
        return largestSoFar;
    }
    public CSVRecord coldestHourInFile (CSVParser parser) {
          //start with smallestSoFar as nothing
          CSVRecord smallestSoFar = null;
          //for each row (currentRow) int the CSV file
        for (CSVRecord currentRow : parser) {
            //if smallestSoFar is nothing
            if (smallestSoFar == null) {
                //set smallestSoFar to the currentRow
                smallestSoFar = currentRow;
            }
            
            //otherwise
            else {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
                if (currentTemp == -9999) {
                    continue;
                }
                if (currentTemp < smallestTemp) {
                    //if so, update smallestSoFar to currentRow
                    smallestSoFar = currentRow;
                }
            }
        }
        //the smallestSoFar is the answer
        return smallestSoFar;
    }  
    public void testColdestHouInFile() {
      FileResource fileEvaluated = new FileResource();
      CSVParser parser = fileEvaluated.getCSVParser();
      CSVRecord smallest= coldestHourInFile(parser);
      System.out.println(smallest);
    }   
    
    public CSVRecord lowestHumidityInFile(CSVParser parser) {
        CSVRecord lowestHumiditySoFar = null;
        for (CSVRecord currentRow : parser ) {
            if (lowestHumiditySoFar == null) {
                lowestHumiditySoFar = currentRow;
            }
           else {
                if (currentRow.get("Humidity").equals("N/A")){
                  continue;
                } 
                double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
                double lowestHumidity = Double.parseDouble(lowestHumiditySoFar.get("Humidity"));
                if (currentHumidity < lowestHumidity) {
                    lowestHumiditySoFar = currentRow;
                }
            }
        }
        return lowestHumiditySoFar;
    }
    //public static CSVRecord lowestHumidityInFile(CSVParser parser) {

        //CSVRecord lowestHumidity = null;

        //for (CSVRecord record : parser) {

            //if (record.get("Humidity").equals("N/A")) {
                //continue;
            //}

            //if (lowestHumidity == null) {
               // lowestHumidity = record;
            //} else {

               // double temperatureF = Double.parseDouble(record.get("Humidity"));
               // double coldestTemp = Double.parseDouble(lowestHumidity.get("Humidity"));
               // lowestHumidity = (temperatureF < coldestTemp) ? record : lowestHumidity;

            //}

        //}

       // return lowestHumidity;
    //}
    public CSVRecord lowestHumidityInManyDays() {
        CSVRecord lowestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
            if (lowestSoFar == null) {
                lowestSoFar = currentRow;
            } else {
                double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
                double lowestHumidity = Double.parseDouble(lowestSoFar.get("Humidity"));
                if (currentHumidity < lowestHumidity) {
                lowestSoFar = currentRow;
                }
            }
        }
        return lowestSoFar;
    }
    public CSVRecord hottestInManyDays() {
        CSVRecord largestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        //directory resource allows us access to multiple files on our computers
        //iterate over files
        for (File f : dr.selectedFiles()) {
          FileResource fr = new FileResource(f);
          //use method to get largest in file
          CSVRecord currentRow = hottestHourInFile(fr.getCSVParser());
          //getLargestOfTwo();
          if (largestSoFar == null) {
              largestSoFar = currentRow; 
          } else {
              double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
              double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
              //Check if currentRow's temperature > largestSoFar
              if (currentTemp > largestTemp) {
                  //If soupdate largestSoFar to currentRow
                  largestSoFar = currentRow;
              } 
          }
        }
        //hottestSoFar is the answer
        return largestSoFar;
    }
    public CSVRecord coldestInManyDays() {
        CSVRecord smallestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        String file = "";
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
            if (smallestSoFar == null) {
                smallestSoFar = currentRow;
                file = f.getAbsolutePath();
            } else
            if (smallestSoFar.equals("-9999")) {
                continue;
            }
            {
                double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
                if (currentTemp < smallestTemp) {
                    smallestSoFar = currentRow;
                    file= f.getAbsolutePath();
                }
            }
        }
        System.out.println(file);
        return smallestSoFar;
    }
    public void testColdestInManyDays(){
      CSVRecord coldest = coldestInManyDays();
      System.out.println(coldest);
    }
    //CSVRecord getLargestOfTwo(CSVRecord currentRow, CSVRecord largestSoFar) {
      //  if (largestSoFar == null) {
                //set largestSoFar to the current row
        //        largestSoFar = currentRow;
          //  }
            //Otherwise
            //else {
              //  double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
                //double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
                //Check if currentRow's temperature > largestSoFar
                //if (currentTemp > largestTemp) {
                    //If so update largestSoFar to currentRow
                  //  largestSoFar = currentRow;
                //} 
            //}
            //return largestSoFar;
    //}
    public double averageTemperature(CSVParser parser){
      double averageTemp;
      double sum = 0;
      int counter = 0;
      
      for (CSVRecord record : parser) {
        sum += Double.parseDouble(record.get("TemperatureF"));
        counter++;
      }
      averageTemp = sum / counter;
      return averageTemp;
    }
    public static double averageTemperatureWithHighHumidityInFile(CSVParser parser, double level) {
        double averageTemp;
        double sum = 0;
        int counter = 0;
        for (CSVRecord record : parser) {
            double humidity = Double.parseDouble(record.get("Humidity"));
            if (humidity >= level) {
                sum += Double.parseDouble(record.get("TemperatureF"));
                counter++;
            }
        }
        averageTemp = sum / counter;
        return averageTemp;
    }    
    public void testAverageTempWHumidity() {
       FileResource fr = new FileResource();
       CSVParser parser = fr.getCSVParser();
       double averageTempHumidity = averageTemperatureWithHighHumidityInFile(parser, 80);
       System.out.println("avg temp was " + averageTempHumidity);
    }
    public void testHottestInDay () {
        FileResource fr = new FileResource();
        CSVRecord largest = hottestHourInFile(fr.getCSVParser());
        System.out.println("hottest temperateure was " + largest.get("TemperatureF") + " at " + largest.get("TimeEDT"));
    }
    public void testColdestInDay() {
        FileResource fr = new FileResource();
        CSVRecord smallest = coldestHourInFile(fr.getCSVParser());
        System.out.println("coldest temperature was " + smallest.get("TemperatureF") + " at " + smallest.get("TimeEDT"));
    }
    public void testHottestInManyDays() {
        CSVRecord largest = hottestInManyDays ();
        System.out.println("Hottest temperature was " + largest.get("TemperatureF") + " at " + largest.get("DateUTC"));
    }
    //public void testColdestInManyDays() {
      //  CSVRecord smallest = coldestInManyDays ();
        //System.out.println("Smalles temperature was " + smallest.get("TemperatureF") + " at " + smallest.get("DateUTC"));
    //}
    public void testLowestHumidity() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord lowest = lowestHumidityInFile(parser);
        System.out.println("lowest humidity was " + lowest);
    }
    public void testLowestHumidityManyFiles() {
        CSVRecord lowest = lowestHumidityInManyDays();
        System.out.println("lowest humidity was " + lowest);
    }
    public void testAverageTemp(){
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double average = averageTemperature(parser);
        System.out.println(average);
    }
    public void testAvgTempWHumidity() {
       FileResource fr = new FileResource();
       CSVParser parser = fr.getCSVParser();
       double avgTempHumidity = averageTemperatureWithHighHumidityInFile(parser, 80);
       System.out.println("Average temperature when the humidity was > or = the amount that you imput is " + avgTempHumidity);
    }
}
